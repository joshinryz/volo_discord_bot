import json
import os
import tempfile

from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import ParagraphStyle, getSampleStyleSheet
from reportlab.lib.units import inch
from reportlab.platypus import (Frame, Paragraph, Preformatted,
                                SimpleDocTemplate, Spacer, Table, TableStyle)


def add_parchment_background(c, doc):
    """Draw the parchment background on each page."""
    background_path = os.path.join('assets', 'parchment_background.jpg')
    c.drawImage(background_path, 0, 0, width=A4[0], height=A4[1], mask='auto')

async def pdf_generator(transcriptions, logo_path=None):
    """
    Generates a PDF with aligned transcription columns, wrapping long data entries, and reduced margins.
    
    :param transcriptions: List of transcriptions to include in the PDF.
    :param logo_path: Optional path to a logo image to include in the PDF.
    :return: Path to the generated PDF file.
    """
    # Ensure the logs directory exists
    logs_dir = "./.logs/pdfs"
    os.makedirs(logs_dir, exist_ok=True)

    # Create a temporary file in the logs directory
    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf", dir=logs_dir) as tmp_file:
        pdf_file_path = tmp_file.name

    # Set up the PDF document with reduced margins
    doc = SimpleDocTemplate(pdf_file_path, pagesize=A4,
                            leftMargin=0.5 * inch, rightMargin=0.5 * inch, topMargin=1 * inch, bottomMargin=1 * inch)
    elements = []

    # Title style with a medieval font
    title_style = ParagraphStyle(
        name="Title",
        fontName="Helvetica-Bold",  # Change to a medieval font if available
        fontSize=24,
        alignment=1,  # Center the title
        textColor=colors.darkred,
    )

    # Content text style (monospaced for alignment)
    content_style = ParagraphStyle(
        name="Content",
        fontName="Courier",  # Monospaced font for alignment
        fontSize=10,
        leading=12,
    )

    # Title of the document
    title = Paragraph("Transcription Report", title_style)
    elements.append(title)
    elements.append(Spacer(1, 24))  # Add more space after the title

    # Column headers
    header_text = f"{'Begin':<15} {'User ID':<25} {'Data':<50}\n"
    elements.append(Preformatted(header_text, content_style))

    # Divider line
    divider = '-' * 90 + '\n'
    elements.append(Preformatted(divider, content_style))
    elements.append(Spacer(1, 12))  # Add space after the header

    # Add the transcriptions, wrapping long text in the data field
    for log_message in transcriptions:
        # try to see if log message is json
        if isinstance(log_message, str):
            try:
                log_message = json.loads(log_message)
            except json.JSONDecodeError:
                continue
        begin = log_message.get("begin", "N/A")
        user_id = log_message.get("user_id", "N/A")
        data = log_message.get("data", "")

        # Wrap the text in the Data column
        formatted_entry = f"{begin:<15} {user_id:<25} {data}"
        elements.append(Paragraph(formatted_entry, content_style))
        elements.append(Spacer(1, 12))

    # Add a watermark or subtle background elements (optional)
    watermark_text = "Generated by V.O.L.O"
    doc.build(elements, onFirstPage=add_parchment_background, onLaterPages=add_parchment_background)

    return pdf_file_path
